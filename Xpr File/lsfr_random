`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 14.10.2024 13:56:35
// Design Name: 
// Module Name: lfsr_random
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module lfsr_random(
    input clk,
    input reset,
    output [1:0] random_number 
);
    reg [5:0] lfsr = 6'b101001;

    always @(posedge clk) begin
        //if (reset)
            //lfsr <= 6'b000001; // Initialize to a non-zero value
        //else begin
        // Feedback using XOR taps for 6-bit LFSR (taps on bits 6 and 5 for maximal period)
        lfsr <= {lfsr[4:0], lfsr[5] ^ lfsr[4]};
        //end
    end

// Use the two most significant bits as the 2-bit random state
    assign random_number = lfsr[5:4];
    endmodule
